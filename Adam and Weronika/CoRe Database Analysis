list_of_core = glob.glob("CoRe_MOFs/*.cif")
list_of_large_window_MOFs = glob.glob("Large_Windows_cif/*.cif")
caps_list_of_core = []
#first capitalise, in order to match the Large_windows_cif file where the names are also capitalised
for i in range(len(list_of_core)):
    caps_list_of_core.append(list_of_core[i].upper())
    
#print(caps_list_of_core)
    split1 = []
    filenames_in_CoRe = []
    split3 = []
    CoRe_refcodes = []
def split_refcode_CoRe():
    """splits cif file names into just the refcode to allow comparison"""

    for i in caps_list_of_core:
        split1.append(i.split("\\"))
    
    for i in split1:
        filenames_in_CoRe.append(i.pop(1)) #create list of only refcodes
        
    for i in filenames_in_CoRe:
        split3.append(i.split("_"))
    
    for i in split3:
        CoRe_refcodes.append(i.pop(0)) #return list of ONLY refcodes of MOFs in CoRe database
        
    
    return CoRe_refcodes

split_refcode_CoRe()
-----------------------------------------------------------------------------------------------------------
Large_refcodes = []
Large_refcodes_split = []
Large_refcodes_dotcif = []
Large_refcodes_dotcif_split = []
def split_refcode_large():
    """splits cif file names of large MOFs into just the refcode to allow comparison"""

    for i in list_of_large_window_MOFs:
        Large_refcodes_split.append(i.split("\\"))
    
    for i in Large_refcodes_split:
        Large_refcodes_dotcif.append(i.pop(1)) #create list of only refcodes
        
    for i in Large_refcodes_dotcif:
        Large_refcodes_dotcif_split.append(i.split("."))
    
    for i in Large_refcodes_dotcif_split:
        Large_refcodes.append(i.pop(0)) #return list of ONLY refcodes of MOFs with LargeWindows
        
    
    return Large_refcodes

split_refcode_large()
------------------------------------------------------------------------------------------------------------
matching_filenames_in_CoRe = []
for i in filenames_in_CoRe:
    refcodes = i.split("_")[0]
    if refcodes in Large_refcodes:
        matching_filenames_in_CoRe.append(i) #creates list of the MOFs with large window sizes
        
lowercase_matching_filenames_in_CoRe = []
final_matching_filenames_in_CoRe = []
for i in matching_filenames_in_CoRe: 
    lowercase_matching_filenames_in_CoRe.append(i.lower()) #makes them lowercase

for i in lowercase_matching_filenames_in_CoRe:
    final_matching_filenames_in_CoRe.append(i.replace("p1","P1").replace("_h","_H")) #some letters need to be uppercase...

print(final_matching_filenames_in_CoRe)

len(final_matching_filenames_in_CoRe)
---------------------------------------------------------------------------------------------------------------
match = []
def compare_lists():
    """compares CoRe database with list of Large Windows MOFs and returns matches"""
    match.append(set(CoRe_refcodes).intersection(Large_refcodes))
    
compare_lists()

for i in match:
    k = len(i)
    
print(k,"MOFs in the CoRe database have at least 1 window larger than 3.64 A",)

