void_mof = []
csd_reader = io.EntryReader('CSD')
for line in open(MOFs_list, 'r'):
    refcode = line.rstrip()
    current_crystal = csd_reader.crystal(refcode)
    void_vol = round(current_crystal.void_volume(),2)
    if void_vol !=0.00:
        void_mof.append(refcode)
        
output = "VOID_MOFs.gcd"
with io.EntryWriter(output) as writer:
    for structure in void_mof:
        #print(structure)
        writer.write(csd_reader.entry(structure))
        
        #Take reference codes from VOID_MOFs.gcd, convert them to cifs.
with io.CrystalReader('VOID_MOFs.gcd', format='identifiers') as reader:
    for crystal in reader:
        with io.CrystalWriter('VOID_cifs/%s.cif' % crystal.identifier) as writer:
            writer.write(crystal)
        
-------------------------------------------------------------------------------------------------------------------        
       
#Function that takes the MOF xyz files, calculates the window sizes, and places them into two lists.
def xyz_analyse_window():
    list_of_xyzs = sorted(glob.glob("Test_VOID_xyz/*.xyz"))
    names = []
    windows = []
    for xyz in list_of_xyzs:
        try:
            molsys = pw.MolecularSystem.load_file(xyz)
            mol = molsys.system_to_molecule()
            window = mol.calculate_windows()
            if window.size == 0:
                pass
            else:
                windows.append(window)
                name = os.path.splitext(os.path.basename(xyz))[0]
                names.append(name)
        except:
            print(f'Error processing {xyz}')
    return(names, windows, problems)
names, windows, problems = xyz_analyse_window()

names_windows_dict = dict(zip(names,windows))
#returns refcodes and window sizes of MOFs with window sizes greater than 3.64
large_MOFs_N2 = {names:windows for (names, windows) in names_windows_dict.items() if np.any (windows > 3.64)}

#Output the large MOFs as cif files, and place into a new folder.
string_to_match = tuple(f"{names}.cif" for names in large_MOFs_N2)
os.mkdir("TEST_Large_Windows_cif")

for filename in os.listdir("Test_VOID_cif"):
    if filename in string_to_match:
        shutil.copy(os.path.join("Test_VOID_cif", filename),"TEST_Large_Windows_cif")
       
----------------------------------------------------------------------------------------------------------------
